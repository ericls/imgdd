type Organization {
  id: ID!
  name: String!
  slug: String!
}

type User {
  id: ID!
  name: String!
  email: String!
}

type OrganizationUser {
  id: ID!
  organization: Organization!
  user: User!
  roles: [Role!]!
}


type Role {
  key: String!
  name: String!
}

type Viewer {
  id: ID!
  organizationUser: OrganizationUser
}

type Query {
  viewer: Viewer!
}


type ViewerResult {
  viewer: Viewer!
}


input CreateUserWithOrganizationInput {
  user_email: String!
  user_password: String!
  organization_name: String!
}

type Mutation {
  authenticate(email: String!, password: String!, organizationId: String = ""): ViewerResult!
  logout: ViewerResult!
  createUserWithOrganization(input: CreateUserWithOrganizationInput!): ViewerResult!
}
