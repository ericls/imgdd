package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"imgdd/graph/model"
)

// Authenticate is the resolver for the authenticate field.
func (r *mutationResolver) Authenticate(ctx context.Context, email string, password string, organizationID *string) (*model.ViewerResult, error) {
	user := r.IdentityRepo.GetUserByEmail(email)
	if user == nil {
		return nil, fmt.Errorf("user not found")
	}
	if !r.ContextUserManager.ValidateUserPassword(user.Id, password) {
		return nil, fmt.Errorf("password incorrect")
	}
	println("userID", user.Id)
	_, orgUser := r.IdentityRepo.GetOrganizationForUser(user.Id, *organizationID)
	if orgUser == nil {
		return nil, fmt.Errorf("organization not found")
	}
	r.LoginFn(ctx, user.Id, orgUser.Id)
	return &model.ViewerResult{Viewer: &model.Viewer{}}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*model.ViewerResult, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// CreateUserWithOrganization is the resolver for the createUserWithOrganization field.
func (r *mutationResolver) CreateUserWithOrganization(ctx context.Context, input model.CreateUserWithOrganizationInput) (*model.ViewerResult, error) {
	orgUser, err := r.IdentityRepo.CreateUserWithOrganization(
		input.UserEmail,
		input.UserPassword,
		input.OrganizationName,
	)
	if err != nil {
		return nil, err
	}
	r.LoginFn(ctx, orgUser.User.Id, orgUser.Id)
	return &model.ViewerResult{Viewer: &model.Viewer{}}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
