package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"imgdd/graph/model"
)

// Authenticate is the resolver for the authenticate field.
func (r *mutationResolver) Authenticate(ctx context.Context, email string, password string, organizationID *string) (*model.ViewerResult, error) {
	user := r.IdentityRepo.GetUserByEmail(email)
	if user == nil {
		return nil, fmt.Errorf("user not found")
	}
	if !r.ContextUserManager.ValidateUserPassword(user.Id, password) {
		return nil, fmt.Errorf("password incorrect")
	}
	_, orgUser := r.IdentityRepo.GetOrganizationForUser(user.Id, *organizationID)
	if orgUser == nil {
		return nil, fmt.Errorf("organization not found")
	}
	r.LoginFn(ctx, user.Id, orgUser.Id)
	return &model.ViewerResult{Viewer: &model.Viewer{}}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*model.ViewerResult, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// CreateUserWithOrganization is the resolver for the createUserWithOrganization field.
func (r *mutationResolver) CreateUserWithOrganization(ctx context.Context, input model.CreateUserWithOrganizationInput) (*model.ViewerResult, error) {
	panic(fmt.Errorf("not implemented: CreateUserWithOrganization - createUserWithOrganization"))
}

// Viewer is the resolver for the viewer field.
func (r *queryResolver) Viewer(ctx context.Context) (*model.Viewer, error) {
	return &model.Viewer{}, nil
}

// ID is the resolver for the id field.
func (r *viewerResolver) ID(ctx context.Context, obj *model.Viewer) (string, error) {
	return "viewer", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Viewer returns ViewerResolver implementation.
func (r *Resolver) Viewer() ViewerResolver { return &viewerResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type viewerResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *viewerResolver) OrganizationUser(ctx context.Context, obj *model.Viewer) (*model.OrganizationUser, error) {
	currentOrganizationUser := r.ContextUserManager.GetAuthenticationInfo(ctx).AuthorizedUser.OrganizationUser
	if currentOrganizationUser == nil {
		return nil, nil
	}
	return model.FromIdentityOrganizationUser(currentOrganizationUser), nil
}
