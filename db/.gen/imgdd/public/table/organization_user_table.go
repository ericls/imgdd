//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationUserTable = newOrganizationUserTableTable("public", "organization_user_table", "")

type organizationUserTableTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OrganizationID postgres.ColumnString
	UserID         postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationUserTableTable struct {
	organizationUserTableTable

	EXCLUDED organizationUserTableTable
}

// AS creates new OrganizationUserTableTable with assigned alias
func (a OrganizationUserTableTable) AS(alias string) *OrganizationUserTableTable {
	return newOrganizationUserTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationUserTableTable with assigned schema name
func (a OrganizationUserTableTable) FromSchema(schemaName string) *OrganizationUserTableTable {
	return newOrganizationUserTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationUserTableTable with assigned table prefix
func (a OrganizationUserTableTable) WithPrefix(prefix string) *OrganizationUserTableTable {
	return newOrganizationUserTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationUserTableTable with assigned table suffix
func (a OrganizationUserTableTable) WithSuffix(suffix string) *OrganizationUserTableTable {
	return newOrganizationUserTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationUserTableTable(schemaName, tableName, alias string) *OrganizationUserTableTable {
	return &OrganizationUserTableTable{
		organizationUserTableTable: newOrganizationUserTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newOrganizationUserTableTableImpl("", "excluded", ""),
	}
}

func newOrganizationUserTableTableImpl(schemaName, tableName, alias string) organizationUserTableTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OrganizationIDColumn = postgres.StringColumn("organization_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OrganizationIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OrganizationIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return organizationUserTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OrganizationID: OrganizationIDColumn,
		UserID:         UserIDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
