//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ImageTable = newImageTableTable("public", "image_table", "")

type imageTableTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OrganizationID postgres.ColumnString
	CreatedBy      postgres.ColumnString
	Name           postgres.ColumnString
	Identifier     postgres.ColumnString
	Root           postgres.ColumnString
	Parent         postgres.ColumnString
	Changes        postgres.ColumnString
	UploaderIP     postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	DeletedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImageTableTable struct {
	imageTableTable

	EXCLUDED imageTableTable
}

// AS creates new ImageTableTable with assigned alias
func (a ImageTableTable) AS(alias string) *ImageTableTable {
	return newImageTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageTableTable with assigned schema name
func (a ImageTableTable) FromSchema(schemaName string) *ImageTableTable {
	return newImageTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageTableTable with assigned table prefix
func (a ImageTableTable) WithPrefix(prefix string) *ImageTableTable {
	return newImageTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageTableTable with assigned table suffix
func (a ImageTableTable) WithSuffix(suffix string) *ImageTableTable {
	return newImageTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageTableTable(schemaName, tableName, alias string) *ImageTableTable {
	return &ImageTableTable{
		imageTableTable: newImageTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newImageTableTableImpl("", "excluded", ""),
	}
}

func newImageTableTableImpl(schemaName, tableName, alias string) imageTableTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OrganizationIDColumn = postgres.StringColumn("organization_id")
		CreatedByColumn      = postgres.StringColumn("created_by")
		NameColumn           = postgres.StringColumn("name")
		IdentifierColumn     = postgres.StringColumn("identifier")
		RootColumn           = postgres.StringColumn("root")
		ParentColumn         = postgres.StringColumn("parent")
		ChangesColumn        = postgres.StringColumn("changes")
		UploaderIPColumn     = postgres.StringColumn("uploader_ip")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn      = postgres.TimestampzColumn("deleted_at")
		allColumns           = postgres.ColumnList{IDColumn, OrganizationIDColumn, CreatedByColumn, NameColumn, IdentifierColumn, RootColumn, ParentColumn, ChangesColumn, UploaderIPColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns       = postgres.ColumnList{OrganizationIDColumn, CreatedByColumn, NameColumn, IdentifierColumn, RootColumn, ParentColumn, ChangesColumn, UploaderIPColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return imageTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OrganizationID: OrganizationIDColumn,
		CreatedBy:      CreatedByColumn,
		Name:           NameColumn,
		Identifier:     IdentifierColumn,
		Root:           RootColumn,
		Parent:         ParentColumn,
		Changes:        ChangesColumn,
		UploaderIP:     UploaderIPColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
