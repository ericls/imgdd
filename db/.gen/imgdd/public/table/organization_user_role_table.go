//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationUserRoleTable = newOrganizationUserRoleTableTable("public", "organization_user_role_table", "")

type organizationUserRoleTableTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	OrganizationUserID postgres.ColumnString
	RoleID             postgres.ColumnString
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationUserRoleTableTable struct {
	organizationUserRoleTableTable

	EXCLUDED organizationUserRoleTableTable
}

// AS creates new OrganizationUserRoleTableTable with assigned alias
func (a OrganizationUserRoleTableTable) AS(alias string) *OrganizationUserRoleTableTable {
	return newOrganizationUserRoleTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationUserRoleTableTable with assigned schema name
func (a OrganizationUserRoleTableTable) FromSchema(schemaName string) *OrganizationUserRoleTableTable {
	return newOrganizationUserRoleTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationUserRoleTableTable with assigned table prefix
func (a OrganizationUserRoleTableTable) WithPrefix(prefix string) *OrganizationUserRoleTableTable {
	return newOrganizationUserRoleTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationUserRoleTableTable with assigned table suffix
func (a OrganizationUserRoleTableTable) WithSuffix(suffix string) *OrganizationUserRoleTableTable {
	return newOrganizationUserRoleTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationUserRoleTableTable(schemaName, tableName, alias string) *OrganizationUserRoleTableTable {
	return &OrganizationUserRoleTableTable{
		organizationUserRoleTableTable: newOrganizationUserRoleTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newOrganizationUserRoleTableTableImpl("", "excluded", ""),
	}
}

func newOrganizationUserRoleTableTableImpl(schemaName, tableName, alias string) organizationUserRoleTableTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		OrganizationUserIDColumn = postgres.StringColumn("organization_user_id")
		RoleIDColumn             = postgres.StringColumn("role_id")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, OrganizationUserIDColumn, RoleIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{OrganizationUserIDColumn, RoleIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return organizationUserRoleTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		OrganizationUserID: OrganizationUserIDColumn,
		RoleID:             RoleIDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
