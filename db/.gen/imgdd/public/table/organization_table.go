//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationTable = newOrganizationTableTable("public", "organization_table", "")

type organizationTableTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Slug        postgres.ColumnString
	DisplayName postgres.ColumnString
	ExtraAttrs  postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationTableTable struct {
	organizationTableTable

	EXCLUDED organizationTableTable
}

// AS creates new OrganizationTableTable with assigned alias
func (a OrganizationTableTable) AS(alias string) *OrganizationTableTable {
	return newOrganizationTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationTableTable with assigned schema name
func (a OrganizationTableTable) FromSchema(schemaName string) *OrganizationTableTable {
	return newOrganizationTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationTableTable with assigned table prefix
func (a OrganizationTableTable) WithPrefix(prefix string) *OrganizationTableTable {
	return newOrganizationTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationTableTable with assigned table suffix
func (a OrganizationTableTable) WithSuffix(suffix string) *OrganizationTableTable {
	return newOrganizationTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationTableTable(schemaName, tableName, alias string) *OrganizationTableTable {
	return &OrganizationTableTable{
		organizationTableTable: newOrganizationTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newOrganizationTableTableImpl("", "excluded", ""),
	}
}

func newOrganizationTableTableImpl(schemaName, tableName, alias string) organizationTableTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		SlugColumn        = postgres.StringColumn("slug")
		DisplayNameColumn = postgres.StringColumn("display_name")
		ExtraAttrsColumn  = postgres.StringColumn("extra_attrs")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, SlugColumn, DisplayNameColumn, ExtraAttrsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{SlugColumn, DisplayNameColumn, ExtraAttrsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return organizationTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Slug:        SlugColumn,
		DisplayName: DisplayNameColumn,
		ExtraAttrs:  ExtraAttrsColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
