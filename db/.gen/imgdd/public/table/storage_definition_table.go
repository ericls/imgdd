//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StorageDefinitionTable = newStorageDefinitionTableTable("public", "storage_definition_table", "")

type storageDefinitionTableTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	StorageType postgres.ColumnString
	Identifier  postgres.ColumnString
	Config      postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	IsEnabled   postgres.ColumnBool
	Priority    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StorageDefinitionTableTable struct {
	storageDefinitionTableTable

	EXCLUDED storageDefinitionTableTable
}

// AS creates new StorageDefinitionTableTable with assigned alias
func (a StorageDefinitionTableTable) AS(alias string) *StorageDefinitionTableTable {
	return newStorageDefinitionTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StorageDefinitionTableTable with assigned schema name
func (a StorageDefinitionTableTable) FromSchema(schemaName string) *StorageDefinitionTableTable {
	return newStorageDefinitionTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StorageDefinitionTableTable with assigned table prefix
func (a StorageDefinitionTableTable) WithPrefix(prefix string) *StorageDefinitionTableTable {
	return newStorageDefinitionTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StorageDefinitionTableTable with assigned table suffix
func (a StorageDefinitionTableTable) WithSuffix(suffix string) *StorageDefinitionTableTable {
	return newStorageDefinitionTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStorageDefinitionTableTable(schemaName, tableName, alias string) *StorageDefinitionTableTable {
	return &StorageDefinitionTableTable{
		storageDefinitionTableTable: newStorageDefinitionTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newStorageDefinitionTableTableImpl("", "excluded", ""),
	}
}

func newStorageDefinitionTableTableImpl(schemaName, tableName, alias string) storageDefinitionTableTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		StorageTypeColumn = postgres.StringColumn("storage_type")
		IdentifierColumn  = postgres.StringColumn("identifier")
		ConfigColumn      = postgres.StringColumn("config")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		IsEnabledColumn   = postgres.BoolColumn("is_enabled")
		PriorityColumn    = postgres.IntegerColumn("priority")
		allColumns        = postgres.ColumnList{IDColumn, StorageTypeColumn, IdentifierColumn, ConfigColumn, CreatedAtColumn, UpdatedAtColumn, IsEnabledColumn, PriorityColumn}
		mutableColumns    = postgres.ColumnList{StorageTypeColumn, IdentifierColumn, ConfigColumn, CreatedAtColumn, UpdatedAtColumn, IsEnabledColumn, PriorityColumn}
	)

	return storageDefinitionTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		StorageType: StorageTypeColumn,
		Identifier:  IdentifierColumn,
		Config:      ConfigColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		IsEnabled:   IsEnabledColumn,
		Priority:    PriorityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
