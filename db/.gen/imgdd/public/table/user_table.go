//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserTable = newUserTableTable("public", "user_table", "")

type userTableTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OrganizationID postgres.ColumnString
	Password       postgres.ColumnString
	Email          postgres.ColumnString
	ExtraAttrs     postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTableTable struct {
	userTableTable

	EXCLUDED userTableTable
}

// AS creates new UserTableTable with assigned alias
func (a UserTableTable) AS(alias string) *UserTableTable {
	return newUserTableTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTableTable with assigned schema name
func (a UserTableTable) FromSchema(schemaName string) *UserTableTable {
	return newUserTableTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTableTable with assigned table prefix
func (a UserTableTable) WithPrefix(prefix string) *UserTableTable {
	return newUserTableTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTableTable with assigned table suffix
func (a UserTableTable) WithSuffix(suffix string) *UserTableTable {
	return newUserTableTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTableTable(schemaName, tableName, alias string) *UserTableTable {
	return &UserTableTable{
		userTableTable: newUserTableTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newUserTableTableImpl("", "excluded", ""),
	}
}

func newUserTableTableImpl(schemaName, tableName, alias string) userTableTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OrganizationIDColumn = postgres.StringColumn("organization_id")
		PasswordColumn       = postgres.StringColumn("password")
		EmailColumn          = postgres.StringColumn("email")
		ExtraAttrsColumn     = postgres.StringColumn("extra_attrs")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OrganizationIDColumn, PasswordColumn, EmailColumn, ExtraAttrsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OrganizationIDColumn, PasswordColumn, EmailColumn, ExtraAttrsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userTableTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OrganizationID: OrganizationIDColumn,
		Password:       PasswordColumn,
		Email:          EmailColumn,
		ExtraAttrs:     ExtraAttrsColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
